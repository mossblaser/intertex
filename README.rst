Intertex
========

A plugin for the `Sphinx <https://www.sphinx-doc.org/>`_ documentation
generator: like `Intersphinx
<https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html>`_ for
Sphinx-built PDF documentation. Provides automatic cross-referencing between
Sphinx generated PDF documentation.

While Intersphinx can be used with Sphinx's PDF output, the result is a PDF
filled with links to online documentation. When collections of PDF
documentation are used in printed form these web links may not be ideal.
Intertex replaces web links to other documentation with bibliographic citations
with page numbers.


Basic usage
-----------

Intertex can be installed from PyPI using::

    $ pip install sphinxcontrib-intertex

Intertex uses the ``*.aux`` file generated by LaTeX during PDF documentation
builds to determine cross references between PDF documents. As a result, you
will need either the ``*.aux`` file associated with the Sphinx-built PDF you
wish to reference or to build the referenced documentation as PDF locally.

To enable Intertex, add it to the extensions ist in your ``conf.py`` file::

    extensions = [
        # ...any other extensions you're using...
        "sphinxcontrib.intertex",
    ]


To cite documentation in another Sphinx-built PDF document, add a
``intertex_mapping`` dictionary to your ``conf.py`` like so::

    intertex_mapping = {
        "my-bib-entry": "/path/to/other/docs/build/latex/other-docs.aux",
    }

In this dictionary, each key should be a citation label and each value the
filename of the ``*.aux`` file generated while the documentation was built.

You also need to add matching bibliographic entries to your Sphinx
documentation, for example::

    .. [my-bib-entry] The PDF Version of my other project's documentation.

Now, when you build your documentation as a PDF, references to objects and
labels defined in the other document, for example::

    See :py:class:`SomeExternalClass` for details.

Will be rendered like:

    See ``SomeExternalClass`` ([my-bib-entry], page 21) for details.

See the `./example/ <./example/>`_ directory for a complete Sphinx
documentation example.  Refer to the sections below for more detailed usage
information.


Intersphinx interoperability
----------------------------

When Intertex and Intersphinx are used simultaneously, Intertex takes priority.
This means that Intertex crossreferences will appear, when available, falling
back on Intersphinx to fill in all other cross references.

Note: by default, Intertex is only enabled for LaTeX (PDF) output and so your
HTML builds will still use Intersphinx links. See below...


Use with HTML documentation
---------------------------

In most cases, if you're building both HTML and PDF versions of your
documentation, you'll probably prefer to use Intersphinx's web-based cross
references in your HTML documentation. As a result, by default Intertex does
nothing when building HTML documentation. If, for some reason, you'd like to
enable Intertex for your HTML documentation too, add the following to your
``conf.py``::

    intertex_formats = ["html", "latex"]


Avoiding ugly hard-coded paths to ``*.aux`` files
-------------------------------------------------

To avoid having to hard-code paths to ``*.aux`` files, intertex allows paths to
be specified relative to a Python module's directory. If you use
developer/editable installs of the Python modules whose documentation you are
referencing, this avoids hard-coding paths.

For example, say we wish to reference the documentation of ``my_great_module``
which is insalled in development/editable mode and which has the following
directory structure on disk::

    my_great_module_repo/
      my_great_module/
        __init__.py
        ...
      docs/
        source/
          ...
        build/
          latex/
            my_great_module_docs.pdf
            my_great_module_docs.aux
            ...

We can use the following ``intertex_mapping`` to point to this::

    intertex_mapping = {
        "my_great_module": "{my_great_module}/../docs/build/latex/*.aux",
    }

Here, module names between ``{`` and ``}`` are substituted with the directory
they reside in and glob patterns (e.g. ``*``) are expanded.

.. note::

    The above solution is still fairly crude and makes lots of assumptions
    about your development setup. Suggestions for better ways to
    discover/configure ``*.aux`` file paths are welcome!


Hiding bibliographies in HTML documentation
-------------------------------------------

You probably don't want bibliographic entries in your HTML documentation
pointing to PDF documentation. To hide these, move all Intertex related
bibliographic entries into, for example, ``intertex-references.rst`` and then
use the following somewhere in your ``index.rst``::

    .. toctree::
      :hidden:

      intertex-references.rst


Changing the reference style
----------------------------

Cross reference formatting can be controlled using the
``intertex_reference_format`` option in ``conf.py``. For example, the default
format is specified as::

    intertex_reference_format = "{label} ({bibref}, page {page})"

The following values will substituted in the format specification:

``{label}``
    The text which is being cross-referenced. For example the class name for a
    ``... :py:class:`FooBar` ...`` style reference.

``{bibref}``
    The bibliographic citation, always rendered in square brackets. For example
    ``[my-bib-entry]``. This will a hyperlink to the entry in the bibliography.

``{page}``
    The page number in the referenced PDF. Note that this is the logical page
    number -- the one printed at the bottom of the PDF pages -- and not
    necessarily the physical page number.

``{section}``
    The section number in the referenced PDF.


Referencing other LaTeX documentation
-------------------------------------

As a bonus, unintended, feature you can also use Intertex to reference parts of
other non-sphinx generated LaTeX documentation. To reference something in your
LaTeX document, add a label as usual::

    \label{my-label-name-here}

Then to cite it from your Sphinx documentation, make sure to add the ``*.aux``
file to your ``intertex_mapping`` dictionary then reference as follows in your
RST::

    See :ref:`Some section <my-label-name-here>` for details...


Sphinx printed PDF output tips
------------------------------

If you're using Intertex, you may also like to enable the following options to
your ``conf.py`` which Sphinx provides to enhance the usability of printed
documentation::

    # Show page numbers for normal cross-references
    latex_show_pagerefs = True

    # Show hyperlink URLs in footnotes
    latex_show_urls = "footnote"

These options don't impact Intertex's output (and aren't required) but make
ordinary cross references usable in printed PDFs.


Disclaimers and warnings
------------------------

**TL;DR: This extension is not really "production grade" and relies on several
undocumented [#]_ Sphinx features/implementation details. It may be broken in subtle
ways, or break under future Sphinx versions. Use at your own risk!**

.. [#] In my defense, the vast majority of both Docutils and Sphinx's public
       API surface is undocumented or under-documented...

This extension is nowhere near as robust in its handling edge-cases of Sphinx's
cross-referencing system as Intersphinx. This is largely due to the ``*.aux``
being mostly an implementation detail of the LaTeX writer and therefore not
being designed to give full referencing metadata. Having tested cross
references to simple Python objects and modules, however, this seems to be
'good enough' for my uses at least.

This extension hooks the ``missing-reference`` Sphinx event in order to replace
missing references with bibliographic citations. When doing this it needs to
insert a reference to the bibliography entry. Ideally, a ``citation_reference``
node would be inserted into the document, however by this point in Sphinx's
processing, such references should already have been resolved. As a
consequence, this plugin effectively has to implement the resolution of
``citation_reference`` into its final form 'by hand'. Of course, this makes
this process a little fragile. This isn't helped by the Sphinx LaTeX writer
itself bodging the ``citation_reference`` resolution process, essentially
deferring it to LaTeX...
